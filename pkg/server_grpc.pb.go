// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: server.proto

package livescore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiveScoreServiceClient is the client API for LiveScoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveScoreServiceClient interface {
	GetPersonById(ctx context.Context, in *GetPersonByIdRequest, opts ...grpc.CallOption) (*GetPersonByIdResponse, error)
	CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonResponse, error)
	GetAllPeople(ctx context.Context, in *GetAllPeopleRequest, opts ...grpc.CallOption) (*GetAllPeopleResponse, error)
}

type liveScoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveScoreServiceClient(cc grpc.ClientConnInterface) LiveScoreServiceClient {
	return &liveScoreServiceClient{cc}
}

func (c *liveScoreServiceClient) GetPersonById(ctx context.Context, in *GetPersonByIdRequest, opts ...grpc.CallOption) (*GetPersonByIdResponse, error) {
	out := new(GetPersonByIdResponse)
	err := c.cc.Invoke(ctx, "/LiveScoreService/GetPersonById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveScoreServiceClient) CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonResponse, error) {
	out := new(CreatePersonResponse)
	err := c.cc.Invoke(ctx, "/LiveScoreService/CreatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveScoreServiceClient) GetAllPeople(ctx context.Context, in *GetAllPeopleRequest, opts ...grpc.CallOption) (*GetAllPeopleResponse, error) {
	out := new(GetAllPeopleResponse)
	err := c.cc.Invoke(ctx, "/LiveScoreService/GetAllPeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveScoreServiceServer is the server API for LiveScoreService service.
// All implementations must embed UnimplementedLiveScoreServiceServer
// for forward compatibility
type LiveScoreServiceServer interface {
	GetPersonById(context.Context, *GetPersonByIdRequest) (*GetPersonByIdResponse, error)
	CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonResponse, error)
	GetAllPeople(context.Context, *GetAllPeopleRequest) (*GetAllPeopleResponse, error)
	mustEmbedUnimplementedLiveScoreServiceServer()
}

// UnimplementedLiveScoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveScoreServiceServer struct {
}

func (UnimplementedLiveScoreServiceServer) GetPersonById(context.Context, *GetPersonByIdRequest) (*GetPersonByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonById not implemented")
}
func (UnimplementedLiveScoreServiceServer) CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (UnimplementedLiveScoreServiceServer) GetAllPeople(context.Context, *GetAllPeopleRequest) (*GetAllPeopleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPeople not implemented")
}
func (UnimplementedLiveScoreServiceServer) mustEmbedUnimplementedLiveScoreServiceServer() {}

// UnsafeLiveScoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveScoreServiceServer will
// result in compilation errors.
type UnsafeLiveScoreServiceServer interface {
	mustEmbedUnimplementedLiveScoreServiceServer()
}

func RegisterLiveScoreServiceServer(s grpc.ServiceRegistrar, srv LiveScoreServiceServer) {
	s.RegisterService(&LiveScoreService_ServiceDesc, srv)
}

func _LiveScoreService_GetPersonById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveScoreServiceServer).GetPersonById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LiveScoreService/GetPersonById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveScoreServiceServer).GetPersonById(ctx, req.(*GetPersonByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveScoreService_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveScoreServiceServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LiveScoreService/CreatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveScoreServiceServer).CreatePerson(ctx, req.(*CreatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveScoreService_GetAllPeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPeopleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveScoreServiceServer).GetAllPeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LiveScoreService/GetAllPeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveScoreServiceServer).GetAllPeople(ctx, req.(*GetAllPeopleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveScoreService_ServiceDesc is the grpc.ServiceDesc for LiveScoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveScoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LiveScoreService",
	HandlerType: (*LiveScoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPersonById",
			Handler:    _LiveScoreService_GetPersonById_Handler,
		},
		{
			MethodName: "CreatePerson",
			Handler:    _LiveScoreService_CreatePerson_Handler,
		},
		{
			MethodName: "GetAllPeople",
			Handler:    _LiveScoreService_GetAllPeople_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
